{
  "name": "Network-tools",
  "tagline": "Simulating traffic in a social network along with analysis tools. ",
  "body": "## Opis projektu\r\nProjekt ma na celu symulowanie ruchu w sieciach społecznościowych, takich jak Facebook czy Google+. Docelowo taką symulację można wykorzystać w celu uczenia algorytmów służących do przewidywania ruchu na maszynach w chmurze lub do stress-testów aplikacji i serwisów webowych. Założeniem projektu jest symulacja przy użyciu aktorowego modelu współbieżności: dzięki temu aplikacja dobrze się skaluje, a za pomocą pojedynczego aktora można zasymulować pojedynczego użytkownika.\r\n\r\n## Struktura projektu\r\nProjekt dzieli się na dwie główne części: właściwy symulator, oraz część odpowiedzialną za generację złożonych sieci, analizę logów z symulacji i rysowanie wykresów.\r\n\r\n### Symulator\r\nNapisany w języku Elixir, bazującym na maszynie wirtualnej Erlanga. Dodatkowo, projekt używa systemu budowania Mix (dedykowanego dla Elixira), pozwalającego na łatwą kompilację i uruchamianie projektu, oraz frameworku OTP, znacznie ułatwiającego budowanie rozproszonych aplikacji.\r\n\r\nDziałanie symulatora jest następujące: wczytywany jest graf, którego wierzchołki to członkowie sieci społecznościowej, a krawędzie -- znajomości. Następnie, uruchamiany jest jeden obiekt `GenServer` per wierzchołek grafu i tworzona jest sieć znajomości (każdy aktor ma listę swoich znajomych). Budowanie sieci odbywa się asynchronicznie, za pomocą przesyłanych wiadomości. Każdy użytkownik ma oprócz tego przypięty proces loggera (zaimplementowany za pomocą mechanizmu `GenEvent` z OTP), który zbiera od niego wszystkie zdarzenia (również asynchronicznie).\r\n\r\nAplikacja bardzo dobrze się rozprasza, obrazek poniżej pokazuje użycie procesorów dla testowego uruchomienia z dużym obciążeniem.\r\n![Processor statistics](https://raw.githubusercontent.com/piotrMocz/network-tools/master/proc-stats.jpg)\r\n\r\nProces symulacji opiera się na kilku założeniach:\r\n* użytkownicy tworzą tylko jeden rodzaj treści\r\n* treść jest tworzona z pewnym prawdopodobieństwem i ma pewną \"jakość\"\r\n* treść stworzona przez użytkownika jest wysyłana do wszystkich jego znajomych\r\n* znajomy, po otrzymaniu treści, decyduje, z pewnym prawdopodobieństwem, czy przekazać wiadomość swoim własnym znajomym\r\n\r\nUdostępnienie treści przez użytkownika polega na wysłaniu wiadomości do wszystkich jego znajomych. Znajomi, udostępniając treść ponownie wysyłają ją do wszystkich znajomych, którzy jeszcze tej wiadomości nie widzieli.\r\n\r\n### Moduł tworzenia grafów i analizy\r\nSieci społecznościowe mają postać grafów o nietrywialnych właściwościach (\"complex networks\"). Jedną z najważniejszych cech takiego grafu jest tzw. \"Small world property\", tzn. średnica grafu jest niewielka. Dodatkowo, w grafie mamy parę \"ognisk\", które mają dużo więcej sąsiadów od pozostałych. Graf taki generowany jest jako połączenie lasu drzew o głębokości dwa, z dodawanymi krawędziami w zależności od wylosowanych parametrów.\r\n\r\nAnaliza logów pozwala na rysowanie wykresów aktywności użytkowników, zawierających informacje o ilości stworzonych, wysłanych i odebranych wiadomości w danej chwili. Przykładowy log znajduje się poniżej:\r\n![Stats](https://raw.githubusercontent.com/piotrMocz/network-tools/master/user-activity.jpg)\r\n\r\n## Uruchamianie \r\nGeneracja grafu:\r\n\r\n    > cd network_tools/\r\n    > python graph-gen.py\r\n    > cp graf.txt ../social_traffic/\r\n\r\nUruchomienie aplikacji (jednym poleceniem):\r\n\r\n    > cd social_traffic/\r\n    > mix compile\r\n    > elixir --erl \"+sbt ns\" -S mix run -e \"SocialTraffic.main \\\"graf.txt\\\"\"\r\n\r\nUruchomienie aplikacji w trybie interaktywnym:\r\n \r\n    > cd social_traffic/\r\n    > mix compile\r\n    > iex -S mix\r\n    iex(1)> user_ids = SocialTraffic.start(\"graf.txt\")\r\n\r\nAnaliza logów (domyślnie):\r\n\r\n    > cd network-tools/\r\n    > python log-processor.py\r\n\r\nAnaliza logów z wyborem parametrów:\r\n\r\n    > cd network-tools/\r\n    > python\r\n    > from log-processor import process_logs\r\n    > process_logs(received=True, sent=True, created=True, linear=True, cumulative=True) # parametry są adjustowalne\r\n\r\n\r\n## Autorzy\r\nRafał Różak, Piotr Moczurad, AGH University of Science and Technology\r\n\r\n## Pobieranie aplikacji:\r\n* [Network tools (analiza logów, tworzenie grafów)](https://www.dropbox.com/s/y385dotsrybxqzy/network-tools.tar.gz?dl=0)\r\n* [Social Traffic (symulacja ruchu)](https://www.dropbox.com/s/lmu72mc8gzjg23g/social_traffic.tar.gz?dl=0)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}